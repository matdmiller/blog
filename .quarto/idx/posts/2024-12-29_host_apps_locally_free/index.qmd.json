{"title":"Self-Hosting Your Applications for Free: A Guide to Cloudflare Tunnels","markdown":{"yaml":{"title":"Self-Hosting Your Applications for Free: A Guide to Cloudflare Tunnels","author":"Mat Miller","date":"01/01/2025","categories":["self-hosting","hosting","cloudflare","apps","home lab","free hosting"],"image":"self_host_cover.jpeg","card-style":"summary","format":{"html":{"number-sections":true,"toc":true,"code-fold":false,"self-contained":true}}},"headingText":"What You Can Build","containsRefs":false,"markdown":"\n\nIn this post, we'll explore how to host applications for free on your local network while making them securely accessible from anywhere over the internet using [Cloudflare Tunnels](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/). I've been running various applications this way for over a year, and it's been a major upgrade in how I run services on my network. The ability to host applications locally while accessing them through any web browser has opened up exciting possibilities for running services without ongoing cloud costs.\n\n\nBefore diving into the technical details, let's look at some real examples of what you can run. I'm currently hosting:\n\n- Jupyter notebooks for AI development, running on my GPU AI workstation - it's like a private version of Google Colab\n- [Open WebUI](https://github.com/open-webui/open-webui) - a free, open-source AI chat interface that can use both locally-running models via Ollama and OpenAI's models through their API plus any other models that support the OpenAI API format - it's like a private version of ChatGPT\n- Access to my router's web configuration and network management\n- Application and network monitoring through Uptime Kuma\n- Direct access to my Synology NAS and its applications such as Surveillance Station and File Hosting\n- PiKVM for remote hardware management of my AI workstation\n- A local TV streaming service using a HD HomeRun tuner that I built using Fast HTML and FFmpeg\n- Various development and testing environments\n\n![Example: Open WebUI Chat Interface Running Locally](self_host_chat.png)\n\n\nAll of these applications run on my local hardware but are accessible through any web browser, needing only an internet connection, without the need to install a VPN.\n\n## Key Benefits\n\nHere's why this approach is valuable:\n\n1. **Cost Efficiency**: Running applications locally can be dramatically cheaper than cloud hosting. My NAS has over 30TB of storage - hosting this in the cloud would cost hundreds monthly.\n\n2. **Hardware Utilization**: Use your existing hardware, including GPUs for AI workloads, without paying cloud compute costs.\n\n3. **Privacy Control**: All data remains on your local network, with Cloudflare only acting as a secure gateway.\n\n4. **Simplified Access**: No VPN needed - just open a browser and log in. This is especially useful when using computers where you can't install a VPN client.\n\n5. **Certificate Management**: Cloudflare handles all SSL certificates automatically - no more managing or renewing certificates manually.\n\n6. **Zero Port Forwarding**: No need to expose ports on your router or manage dynamic DNS.\n\n## How Cloudflare Tunnels Work\n\nA Cloudflare Tunnel creates a secure connection between your local network and Cloudflare's edge network through these components:\n\n1. A lightweight daemon runs locally, establishing an outbound connection to Cloudflare\n2. Traffic is routed through Cloudflare's global network to your local services\n3. All traffic is encrypted end-to-end\n4. Authentication and access controls are managed at the edge\n\nThe architecture looks like this:\n\n```\nCloudflare Tunnel Architecture:\nBrowser -> Cloudflare Edge -> Encrypted Tunnel -> Local Daemon -> Your Services\n```\n![Cloudflare Tunnels Architecture Diagram](cloudflare_tunnels_diagram.webp)\n\n\nThis design eliminates the need for inbound firewall rules while providing enterprise-grade security features.\n\n## Getting Started\n\nLet's walk through setting up your first Cloudflare Tunnel. You'll need:\n\n1. A domain name (can be registered through Cloudflare or elsewhere)\n2. A Cloudflare account\n3. Docker installed on your local machine\n4. An application you want to make accessible\n\n### Initial Setup\n\nFirst, register your domain with Cloudflare or point your existing domain's nameservers to Cloudflare. While propagation can technically take up to 24 hours, it usually completes within minutes.\n\nFor the smoothest experience, I recommend:\n- Setting up Docker before starting (Synology NAS comes with it pre-installed)\n- Installing Portainer for easy Docker management\n- Having your applications ready to expose\n- [Follow along with the Cloudflare Zero Trust setup guide](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/)\n\n### Running the Tunnel\n\nThe easiest way to run the tunnel is through Docker. Here's a basic command:\n\n```bash\ndocker run -d \\\n  --name cloudflared \\\n  --restart unless-stopped \\\n  cloudflare/cloudflared:latest \\\n  tunnel --no-autoupdate run --token YOUR_TUNNEL_TOKEN\n```\n\n![Adding a tunnel in Cloudflare Zero Trust](add_tunnel_docker.png)\n\n\nThe `--restart unless-stopped` flag ensures the tunnel restarts automatically after system reboots. You should copy and paste the docker command from your Cloudflare Zero Trust dashboard which will have your token already included. Before running the command, you should edit it to include the extra arguments specified above.\n\n### Adding Access Rules to Secure Your Applications\n\nThe first thing you'll want to do after creating the tunnel is to set up Access Rules. This is where you'll define who can access your applications. This is an important step to keeping your applications and local network secure.\n\nSet up a default access group and wildcard subdomain application definition to ensure all new applications are secure by default.\n\n1. Navigate to Access -> Access Groups\n![Access group menu in Cloudflare Zero Trust](access_group_menu.png)\n\n2. Click on the \"Add a Group\" button\n3. Enter a name for your access group (ex: \"Default Access Group\")\n4. Check the \"Set as default group\" checkbox\n5. Under \"Define group criteria\" -> \"Include\" -> \"Selector\" select \"Emails\" and add the list of email addresses you want to have access to your applications separated by commas. Only include email addresses you trust and ones you're sure you want to have access to your applications.\n6. Click \"Add require\" at the bottom of the section.\n7. Under \"Require\" -> \"Selector\" select \"Country\" and add the country you want to allow access from. This is a great extra security measure to further lock down access to your applications. You can always change this later.\n8. Click \"Add exclude\" at the bottom of the section.\n9. Under \"Exclude\" -> \"Selector\" select \"Country\" and add the country you want to block access from. I have added Russia, China, and North Korea to my exclude list because state sponsored hacking from these countries is more common.\n10. Add any additional rules you want to further secure your applications.\n11. Finally, click \"Save\" at the bottom of the page.\n\n![Default access group configuration in Cloudflare Zero Trust](access_group_default.png)\n\n### Adding A Master Wildcard Subdomain to apply security by default to any new applications\n\n1. Navigate to Access -> Applications\n2. Click on the \"Add an application\" button\n![Adding an application in Cloudflare Zero Trust](access_applications_add.png)\n3. Select \"Self-hosted\"\n4. For \"Application name\" enter a name for your application (ex: \"Master Wildcard\")\n5. Under \"Session Duration\" select an appropriate duration for your session which is how long until the user will need to re-authenticate. If you plan on mostly using trusted devices you can set this to a longer duration but if you plan on using it on untrusted devices regularly you should set this to a shorter duration.\n5. For \"Subdomain\" enter a wildcard `*`\n6. For \"Domain\" select your domain name (ex: mydomain.com)\n7. Under \"Identity providers\" select all of the identity providers you want to use to authenticate users. By default \"One-time PIN\" is selected which is Cloudflare's magic link authentication. I recommend adding Google as a provider as well if you typically use Google accounts to access your applications.\n![Adding an application in Cloudflare Zero Trust](access_applications_add_an_application.png){.lightbox}\n8. Fill out any additional settings you want to apply to your application and the click \"Next\" at the bottom of the page.\n9. Give your policy a name in the \"Policy name\" field.\n10. Ensure that the group you created earlier is selected in the \"Access group\" field.\n11. Add any additional rules you want to apply to your application and then click \"Next\" at the bottom of the page.\n![Adding application policies in Cloudflare Zero Trust](access_applications_add_application_policies.png)\n\n12. Select \"HTTP only\" under \"Cookie settings\" and add any additional settings you want to apply to your application and then click \"Add application\" at the bottom of the page to finish setting up your master wildcard subdomain. \n\n### Adding Your First Application\n\nLet's say you want to make a web application running on port 8080 accessible. In the Cloudflare Zero Trust dashboard:\n\n1. Navigate to Networks -> Tunnels\n2. Click on the tunnel you want to edit and then click on the \"Edit\" button\n3. Click on the \"Public Hostname\" tab\n4. Click on the \"Add a public hostname\" button\n![Adding a public hostname in Cloudflare Zero Trust](tunnels_add_public_hostname.png)\n5. Enter your subdomain and select your domain (e.g., app.yourdomain.com)\n6. Set the type to HTTP(S) and the URL to {your service ip address - ex: 192.168.1.100}:{your service port - ex: 8080}\n6b. If your service is running HTTPS, click \"Additional application settings\" -> \"TLS\" -> and turn on \"No TLS verify\" if you're running a self-signed certificate\n7. Click on the \"Save hostname\" button\n![Public hostname configuration page in Cloudflare Zero Trust](tunnels_public_hostname_page.png)\n\n8. If you want to set up custom security settings for this application you can follow the steps above, but substitute the master wildcard subdomain for this application's subdomain and whatever other settings you want to apply to this application.\n\n## Recommended Security Measures\n\nWhile I'm not a security expert, here are some practices that have worked well for me:\n\n1. **Email Authentication**: Create access groups and specify exactly which email addresses can access each application. This is a great additional layer of security to ensure that only trusted users have access to your applications.\n\n2. **Geographic Restrictions**: Limit access to only the countries you need. Unless you have a specific reason, exclude countries known for hosting malicious traffic.\n\n3. **Network Segmentation**: If possible, run your Cloudflare tunnel and exposed services on a separate VLAN. This provides an additional layer of protection for your main network.\n\n4. **Default Security**: Set up a wildcard rule (*.yourdomain.com) with strict access controls as your default. This ensures new services are secure by default.\n\n5. **Two-Factor Authentication**: Enable 2FA on your Cloudflare account - this is crucial since it controls access to all your services and your internal network.\n\nThese recommendations help create defense in depth without making the system overly complicated to manage. Each person should evaluate their own security needs and implement controls accordingly.\n\n## Performance Considerations\n\nIn my testing with a 5Gbps Google Fiber connection, I've seen:\n\n- Port Forwarding: ~2.5-3 Gbps\n- Cloudflare Tunnel: 500 Mbps download, 600-800 Mbps upload\n\nWhile this is significantly slower than port forwarding, it's more than adequate for most web applications and development work. The free tier has been more than sufficient for my personal use, though you should be mindful of bandwidth consumption, especially with media streaming. Don't abuse the free bandwidth by hosting large media files or streaming services using free Cloudflare Tunnels.\n\nFor context, most home internet connections are well below these speeds, so the tunnel performance won't be your bottleneck in most cases.\n\n## Real-World Example: AI Development Environment\n\nLet's look at how I've set up my AI development environment:\n\n1. Jupyter notebook server running on my GPU workstation\n2. Cloudflare Tunnel exposing it at jupyter.mydomain.com\n3. Email authentication only allowing access from my email address\n4. Geographic restriction to my home country\n5. HTTPS automatically handled by Cloudflare\n\nThis gives me secure access to GPU computing resources from anywhere, without the cost or complexity of cloud services. It's kind of like having my own private Google Colab instance without any of the limitations.\n\n## Docker and Data Management\n\nMost of my applications run in Docker containers, with volumes mapped to specific paths on my NAS. This approach:\n- Keeps application data separate from containers\n- Makes updates and container recreation simple\n- Ensures data persistence across container updates\n- Simplifies backup procedures\n\nWhen setting up new applications, always plan your data storage strategy first. A common mistake is storing important data inside containers, which can be lost when containers are removed or updated.\n\n## Looking Forward\n\nThe ability to easily host applications on your own hardware creates powerful opportunities for running new AI-based applications locally, developing custom services, and experimenting with new technologies without worrying about cloud costs. In addition, this skillset you build by setting up your own Cloudflare Tunnels is increasingly valuable as businesses look to optimize their infrastructure costs by hosting their own applications locally using Cloudflare Tunnels.\n\n## Conclusion\n\nCloudflare Tunnels provides an excellent way to host personal projects and applications without the complexity of traditional networking setups or the ongoing costs of cloud services while providing enterprise-grade security features. While this guide focuses on personal projects, the same principles and technologies scale directly to business environments, from small startups to large enterprises. The skills you develop hosting your own applications this way are directly applicable to professional environments.\n\nI particularly appreciate how this setup lets me focus on building and running applications rather than managing infrastructure. While there's always more to learn and improve, this approach has enabled me to build and experiment without worrying about complex networking or excessive cloud costs.\n\nRemember to evaluate your own security requirements and risk tolerance when implementing any solution. The configurations I've described work well for my needs, but your requirements may differ.\n\nIf you're interested in learning more, I highly recommend checking out the [Lawrence Systems video on Cloudflare Tunnels setup](https://youtu.be/eojWaJQvqiw), which provides additional perspectives and implementation details. You can also check out the [Cloudflare Tunnels documentation](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/) for more information.","srcMarkdownNoYaml":"\n\nIn this post, we'll explore how to host applications for free on your local network while making them securely accessible from anywhere over the internet using [Cloudflare Tunnels](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/). I've been running various applications this way for over a year, and it's been a major upgrade in how I run services on my network. The ability to host applications locally while accessing them through any web browser has opened up exciting possibilities for running services without ongoing cloud costs.\n\n## What You Can Build\n\nBefore diving into the technical details, let's look at some real examples of what you can run. I'm currently hosting:\n\n- Jupyter notebooks for AI development, running on my GPU AI workstation - it's like a private version of Google Colab\n- [Open WebUI](https://github.com/open-webui/open-webui) - a free, open-source AI chat interface that can use both locally-running models via Ollama and OpenAI's models through their API plus any other models that support the OpenAI API format - it's like a private version of ChatGPT\n- Access to my router's web configuration and network management\n- Application and network monitoring through Uptime Kuma\n- Direct access to my Synology NAS and its applications such as Surveillance Station and File Hosting\n- PiKVM for remote hardware management of my AI workstation\n- A local TV streaming service using a HD HomeRun tuner that I built using Fast HTML and FFmpeg\n- Various development and testing environments\n\n![Example: Open WebUI Chat Interface Running Locally](self_host_chat.png)\n\n\nAll of these applications run on my local hardware but are accessible through any web browser, needing only an internet connection, without the need to install a VPN.\n\n## Key Benefits\n\nHere's why this approach is valuable:\n\n1. **Cost Efficiency**: Running applications locally can be dramatically cheaper than cloud hosting. My NAS has over 30TB of storage - hosting this in the cloud would cost hundreds monthly.\n\n2. **Hardware Utilization**: Use your existing hardware, including GPUs for AI workloads, without paying cloud compute costs.\n\n3. **Privacy Control**: All data remains on your local network, with Cloudflare only acting as a secure gateway.\n\n4. **Simplified Access**: No VPN needed - just open a browser and log in. This is especially useful when using computers where you can't install a VPN client.\n\n5. **Certificate Management**: Cloudflare handles all SSL certificates automatically - no more managing or renewing certificates manually.\n\n6. **Zero Port Forwarding**: No need to expose ports on your router or manage dynamic DNS.\n\n## How Cloudflare Tunnels Work\n\nA Cloudflare Tunnel creates a secure connection between your local network and Cloudflare's edge network through these components:\n\n1. A lightweight daemon runs locally, establishing an outbound connection to Cloudflare\n2. Traffic is routed through Cloudflare's global network to your local services\n3. All traffic is encrypted end-to-end\n4. Authentication and access controls are managed at the edge\n\nThe architecture looks like this:\n\n```\nCloudflare Tunnel Architecture:\nBrowser -> Cloudflare Edge -> Encrypted Tunnel -> Local Daemon -> Your Services\n```\n![Cloudflare Tunnels Architecture Diagram](cloudflare_tunnels_diagram.webp)\n\n\nThis design eliminates the need for inbound firewall rules while providing enterprise-grade security features.\n\n## Getting Started\n\nLet's walk through setting up your first Cloudflare Tunnel. You'll need:\n\n1. A domain name (can be registered through Cloudflare or elsewhere)\n2. A Cloudflare account\n3. Docker installed on your local machine\n4. An application you want to make accessible\n\n### Initial Setup\n\nFirst, register your domain with Cloudflare or point your existing domain's nameservers to Cloudflare. While propagation can technically take up to 24 hours, it usually completes within minutes.\n\nFor the smoothest experience, I recommend:\n- Setting up Docker before starting (Synology NAS comes with it pre-installed)\n- Installing Portainer for easy Docker management\n- Having your applications ready to expose\n- [Follow along with the Cloudflare Zero Trust setup guide](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/)\n\n### Running the Tunnel\n\nThe easiest way to run the tunnel is through Docker. Here's a basic command:\n\n```bash\ndocker run -d \\\n  --name cloudflared \\\n  --restart unless-stopped \\\n  cloudflare/cloudflared:latest \\\n  tunnel --no-autoupdate run --token YOUR_TUNNEL_TOKEN\n```\n\n![Adding a tunnel in Cloudflare Zero Trust](add_tunnel_docker.png)\n\n\nThe `--restart unless-stopped` flag ensures the tunnel restarts automatically after system reboots. You should copy and paste the docker command from your Cloudflare Zero Trust dashboard which will have your token already included. Before running the command, you should edit it to include the extra arguments specified above.\n\n### Adding Access Rules to Secure Your Applications\n\nThe first thing you'll want to do after creating the tunnel is to set up Access Rules. This is where you'll define who can access your applications. This is an important step to keeping your applications and local network secure.\n\nSet up a default access group and wildcard subdomain application definition to ensure all new applications are secure by default.\n\n1. Navigate to Access -> Access Groups\n![Access group menu in Cloudflare Zero Trust](access_group_menu.png)\n\n2. Click on the \"Add a Group\" button\n3. Enter a name for your access group (ex: \"Default Access Group\")\n4. Check the \"Set as default group\" checkbox\n5. Under \"Define group criteria\" -> \"Include\" -> \"Selector\" select \"Emails\" and add the list of email addresses you want to have access to your applications separated by commas. Only include email addresses you trust and ones you're sure you want to have access to your applications.\n6. Click \"Add require\" at the bottom of the section.\n7. Under \"Require\" -> \"Selector\" select \"Country\" and add the country you want to allow access from. This is a great extra security measure to further lock down access to your applications. You can always change this later.\n8. Click \"Add exclude\" at the bottom of the section.\n9. Under \"Exclude\" -> \"Selector\" select \"Country\" and add the country you want to block access from. I have added Russia, China, and North Korea to my exclude list because state sponsored hacking from these countries is more common.\n10. Add any additional rules you want to further secure your applications.\n11. Finally, click \"Save\" at the bottom of the page.\n\n![Default access group configuration in Cloudflare Zero Trust](access_group_default.png)\n\n### Adding A Master Wildcard Subdomain to apply security by default to any new applications\n\n1. Navigate to Access -> Applications\n2. Click on the \"Add an application\" button\n![Adding an application in Cloudflare Zero Trust](access_applications_add.png)\n3. Select \"Self-hosted\"\n4. For \"Application name\" enter a name for your application (ex: \"Master Wildcard\")\n5. Under \"Session Duration\" select an appropriate duration for your session which is how long until the user will need to re-authenticate. If you plan on mostly using trusted devices you can set this to a longer duration but if you plan on using it on untrusted devices regularly you should set this to a shorter duration.\n5. For \"Subdomain\" enter a wildcard `*`\n6. For \"Domain\" select your domain name (ex: mydomain.com)\n7. Under \"Identity providers\" select all of the identity providers you want to use to authenticate users. By default \"One-time PIN\" is selected which is Cloudflare's magic link authentication. I recommend adding Google as a provider as well if you typically use Google accounts to access your applications.\n![Adding an application in Cloudflare Zero Trust](access_applications_add_an_application.png){.lightbox}\n8. Fill out any additional settings you want to apply to your application and the click \"Next\" at the bottom of the page.\n9. Give your policy a name in the \"Policy name\" field.\n10. Ensure that the group you created earlier is selected in the \"Access group\" field.\n11. Add any additional rules you want to apply to your application and then click \"Next\" at the bottom of the page.\n![Adding application policies in Cloudflare Zero Trust](access_applications_add_application_policies.png)\n\n12. Select \"HTTP only\" under \"Cookie settings\" and add any additional settings you want to apply to your application and then click \"Add application\" at the bottom of the page to finish setting up your master wildcard subdomain. \n\n### Adding Your First Application\n\nLet's say you want to make a web application running on port 8080 accessible. In the Cloudflare Zero Trust dashboard:\n\n1. Navigate to Networks -> Tunnels\n2. Click on the tunnel you want to edit and then click on the \"Edit\" button\n3. Click on the \"Public Hostname\" tab\n4. Click on the \"Add a public hostname\" button\n![Adding a public hostname in Cloudflare Zero Trust](tunnels_add_public_hostname.png)\n5. Enter your subdomain and select your domain (e.g., app.yourdomain.com)\n6. Set the type to HTTP(S) and the URL to {your service ip address - ex: 192.168.1.100}:{your service port - ex: 8080}\n6b. If your service is running HTTPS, click \"Additional application settings\" -> \"TLS\" -> and turn on \"No TLS verify\" if you're running a self-signed certificate\n7. Click on the \"Save hostname\" button\n![Public hostname configuration page in Cloudflare Zero Trust](tunnels_public_hostname_page.png)\n\n8. If you want to set up custom security settings for this application you can follow the steps above, but substitute the master wildcard subdomain for this application's subdomain and whatever other settings you want to apply to this application.\n\n## Recommended Security Measures\n\nWhile I'm not a security expert, here are some practices that have worked well for me:\n\n1. **Email Authentication**: Create access groups and specify exactly which email addresses can access each application. This is a great additional layer of security to ensure that only trusted users have access to your applications.\n\n2. **Geographic Restrictions**: Limit access to only the countries you need. Unless you have a specific reason, exclude countries known for hosting malicious traffic.\n\n3. **Network Segmentation**: If possible, run your Cloudflare tunnel and exposed services on a separate VLAN. This provides an additional layer of protection for your main network.\n\n4. **Default Security**: Set up a wildcard rule (*.yourdomain.com) with strict access controls as your default. This ensures new services are secure by default.\n\n5. **Two-Factor Authentication**: Enable 2FA on your Cloudflare account - this is crucial since it controls access to all your services and your internal network.\n\nThese recommendations help create defense in depth without making the system overly complicated to manage. Each person should evaluate their own security needs and implement controls accordingly.\n\n## Performance Considerations\n\nIn my testing with a 5Gbps Google Fiber connection, I've seen:\n\n- Port Forwarding: ~2.5-3 Gbps\n- Cloudflare Tunnel: 500 Mbps download, 600-800 Mbps upload\n\nWhile this is significantly slower than port forwarding, it's more than adequate for most web applications and development work. The free tier has been more than sufficient for my personal use, though you should be mindful of bandwidth consumption, especially with media streaming. Don't abuse the free bandwidth by hosting large media files or streaming services using free Cloudflare Tunnels.\n\nFor context, most home internet connections are well below these speeds, so the tunnel performance won't be your bottleneck in most cases.\n\n## Real-World Example: AI Development Environment\n\nLet's look at how I've set up my AI development environment:\n\n1. Jupyter notebook server running on my GPU workstation\n2. Cloudflare Tunnel exposing it at jupyter.mydomain.com\n3. Email authentication only allowing access from my email address\n4. Geographic restriction to my home country\n5. HTTPS automatically handled by Cloudflare\n\nThis gives me secure access to GPU computing resources from anywhere, without the cost or complexity of cloud services. It's kind of like having my own private Google Colab instance without any of the limitations.\n\n## Docker and Data Management\n\nMost of my applications run in Docker containers, with volumes mapped to specific paths on my NAS. This approach:\n- Keeps application data separate from containers\n- Makes updates and container recreation simple\n- Ensures data persistence across container updates\n- Simplifies backup procedures\n\nWhen setting up new applications, always plan your data storage strategy first. A common mistake is storing important data inside containers, which can be lost when containers are removed or updated.\n\n## Looking Forward\n\nThe ability to easily host applications on your own hardware creates powerful opportunities for running new AI-based applications locally, developing custom services, and experimenting with new technologies without worrying about cloud costs. In addition, this skillset you build by setting up your own Cloudflare Tunnels is increasingly valuable as businesses look to optimize their infrastructure costs by hosting their own applications locally using Cloudflare Tunnels.\n\n## Conclusion\n\nCloudflare Tunnels provides an excellent way to host personal projects and applications without the complexity of traditional networking setups or the ongoing costs of cloud services while providing enterprise-grade security features. While this guide focuses on personal projects, the same principles and technologies scale directly to business environments, from small startups to large enterprises. The skills you develop hosting your own applications this way are directly applicable to professional environments.\n\nI particularly appreciate how this setup lets me focus on building and running applications rather than managing infrastructure. While there's always more to learn and improve, this approach has enabled me to build and experiment without worrying about complex networking or excessive cloud costs.\n\nRemember to evaluate your own security requirements and risk tolerance when implementing any solution. The configurations I've described work well for my needs, but your requirements may differ.\n\nIf you're interested in learning more, I highly recommend checking out the [Lawrence Systems video on Cloudflare Tunnels setup](https://youtu.be/eojWaJQvqiw), which provides additional perspectives and implementation details. You can also check out the [Cloudflare Tunnels documentation](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/) for more information."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":true,"toc":true,"self-contained":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","editor":{"render-on-save":true},"theme":"lux","title-block-banner":true,"title":"Self-Hosting Your Applications for Free: A Guide to Cloudflare Tunnels","author":"Mat Miller","date":"01/01/2025","categories":["self-hosting","hosting","cloudflare","apps","home lab","free hosting"],"image":"self_host_cover.jpeg","card-style":"summary"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}